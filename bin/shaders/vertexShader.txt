#version 330 core

in vec3 pos;
in vec2 coordenadasDaTextura;
in vec3 normais;

out vec2 vetorTextura;
out vec3 vetorParaLuz;
out vec3 normalDaSuperficie;
out vec3 vetorParaCamera;

uniform mat4 matrizDeTransformacao;
uniform mat4 matrizDeProjecao;
uniform mat4 matrizDeVisualizacao;
uniform vec3 posicaoDaLuz;
uniform float iluminosidadeFalsa;

void main(void){
	
	vec4 pos_mundo = matrizDeTransformacao * vec4(pos,1.0);
	vec4 pos_camera = inverse(matrizDeVisualizacao) * vec4(0,0,0,1);
	
	//Onde renderizar os vertices na tela
	
	gl_Position = matrizDeProjecao * matrizDeVisualizacao * pos_mundo;
	
	//O vertexshader não pode lidar com a textura já que ele lida somente com os vertices e não com o que está entre os vertices.
	
	vetorTextura = coordenadasDaTextura;
	
	if(iluminosidadeFalsa > 0.5){
		normalDaSuperficie = vec3(0.0,1.0,0.0);
	}
	else{
		normalDaSuperficie = (matrizDeTransformacao * vec4(normais,0.0)).xyz;
	}
	vetorParaLuz = posicaoDaLuz - pos_mundo.xyz;
	
	vetorParaCamera = pos_camera.xyz - pos_mundo.xyz;
	

	

}